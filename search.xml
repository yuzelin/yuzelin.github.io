<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/09/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>第3章 Java的基本程序设计结构</title>
    <url>/2020/09/01/%E7%AC%AC3%E7%AB%A0%20Java%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p>&emsp;&emsp;这是一些零碎的知识点，记录如下：</p>
<img src="/custom_source/images/%E5%9F%BA%E6%9C%AC%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%93%E6%9E%84.png" class="[基本程序设计结构]">

<p>&emsp;&emsp;对其中的unsigned部分，做一个小的记录。以下以8位的byte为例。</p>
<p>&emsp;&emsp;首先是二进制算数运算，计算机内部数字是采用补码的方式存储的，因此，byte变量可以存储0x0-0xff的数，只不过若直接输出，只会输出有符号的形式。对0xff（255），若视为有符号的byte，是-1的补码，则会输出-1：</p>
<img src="/custom_source/images/%E6%B5%8B%E8%AF%95255.png" class="[测试255]">

<p>所以只要结果不溢出，即大于255，可以将其视为无符号数并进行加减乘的运算。若要得到它的无符号值，可以使用toUnsignedxxx方法；除此之外，可以使用var &amp; 0xff的方法，原理是在进行&amp;操作时，两个操作数隐式的转换到int，0xff的高3字节全部填充0，经过&amp;把var的高3字节置0了，结果将var的补码视为一个正数的原码（正数原码等于补码），起到unsigned的效果。</p>
<p>&emsp;&emsp;通过查看Byte.toUnsignedInt方法的源码，可以看到做法正是这样：</p>
<img src="/custom_source/images/Byte.toUnsignedInt.png" class="[Byte.toUnsignedInt]">

<p>通过源码的注释可以知道，这样操作后，负数相当于加了0x100(2<sup>8</sup>)。</p>
<p>&emsp;&emsp;有关char类型和String：<a href="/2020/09/02/Java%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/" title="Java中的字符编码">Java中的字符编码</a> </p>
<p>&emsp;&emsp;有关格式化输出：<a href="/2020/09/03/Java%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA%E7%9A%84%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E%E7%AC%A6/" title="Java格式化输出的格式说明符">Java格式化输出的格式说明符</a></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Core Java Volume Ⅰ</category>
      </categories>
      <tags>
        <tag>reading notes</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中的字符编码</title>
    <url>/2020/09/02/Java%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</url>
    <content><![CDATA[<p>&emsp;&emsp;在看<em>Core Java</em>时，看到char类型一节，发现Java中的char与C中的char完全不同，它与Unicode编码有关系。为了弄清楚这个问题，查看了一些资料，记录如下。</p>
<p>&emsp;&emsp;首先是编码问题，通过以下两篇文章有了比较清晰的认识：</p>
<a href="https://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" title="字符编码笔记：ASCII，Unicode 和 UTF-8" target="_blank">字符编码笔记：ASCII，Unicode 和 UTF-8</a><br>

<a href="https://zhuanlan.zhihu.com/p/46216008" title="程序员必备：彻底弄懂常见的7种中文字符编码" target="_blank">程序员必备：彻底弄懂常见的7种中文字符编码</a>

<p>所以不再赘述。</p>
<p>&emsp;&emsp;再说Java和Unicode的关系。Java采用的是<a href="https://en.wikipedia.org/wiki/UTF-16" title="UTF-16" target="_blank">UTF-16</a>编码方式。顾名思义，UTF-16的基本“单元”是16 bits，称之为代码单元（code unit）。而Unicode中的字符对应的代码值称为码点（code point）。Unicode的码点可以分成17个代码平面（<a href="https://en.wikipedia.org/wiki/Plane_(Unicode)" title="Plane(Unicode)" target="_blank">code plane</a>）。第一个代码平面称为基本多语言平面（Basic Multilingual Plane, BMP），码点范围为U+0000-U+FFFF，每个字符只用16 bits即可表示；其余的平面称为辅助平面（Supplementary Planes），码点范围为U+10000-U+10FFFF，用两个连续的代码单元对（surrogate pair）表示。如何知道一个代码单元代表一个码点，还是某个码点的一半（surrogate）呢？</p>
<p>&emsp;&emsp;在Unicode标准中，BMP平面的U+D800-U+DFFF是没有分配字符的，留给UTF-16编码辅助平面中的字符。U+D800-U+DBFF用于high surrogate，U+DC00-U+DFFF用于low surrogate。具体的算法是（<a href="https://en.wikipedia.org/wiki/UTF-16#Code_points_from_U+010000_to_U+10FFFF" title="UTF-16" target="_blank">wikipedia: UTF-16, 2.2</a>）：</p>
<ul>
<li>码点U减去0x10000得U’（0x0-0xFFFFF），表示为20 bits；</li>
<li>U’的高10 bits（0x0-0x3FF）加到0xD800上作为high surrogate。可以看到这样操作下，high surrogate的范围正好是0xD800–0xDBFF；</li>
<li>U‘的低10bits加到0xDC00上作为low surrogate，范围为0xDC00-0xDFFFF。</li>
</ul>
<p>这样，在UTF-16中，就能简单的区分一个代码单元是BMP中码点还是surrogate。Java中的char类型正是描述了UTF-16编码中的一个代码单元。String在JDK 8及以前使用char[]实现，从JDK 9起使用byte[]实现。不管哪一种实现，String中的length方法返回的是代码单元数量。如果包含两单元字符的话，需要使用codePointCount方法得到码点的数量。使用字符𝕆（U+1D546; \uD835\uDD46）测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = <span class="string">&quot;𝕆&quot;</span>;</span><br><span class="line">System.out.println(s.length() + <span class="string">&quot; &quot;</span> +</span><br><span class="line">        s.codePointCount(<span class="number">0</span>, s.length()));</span><br></pre></td></tr></table></figure>

<p>结果为：2 1</p>
]]></content>
      <categories>
        <category>foundation</category>
      </categories>
      <tags>
        <tag>Character encoding</tag>
        <tag>Unicode Transformation Formats(UTF)</tag>
        <tag>UTF-16</tag>
      </tags>
  </entry>
  <entry>
    <title>Java格式化输出的格式说明符</title>
    <url>/2020/09/03/Java%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA%E7%9A%84%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E%E7%AC%A6/</url>
    <content><![CDATA[<p>&emsp;&emsp;Java 5沿用了C中printf方法，可以为System.out.printf提供格式说明符来控制输出的格式。</p>
<p>&emsp;&emsp;通过查看PrintStream.printf的源码，追踪到java.util.Formatter类，该类定义了对格式化串的一系列解析方法。这里只看格式说明符相关的定义。首先是格式说明符的格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// %[argument_index$][flags][width][.precision][t]conversion</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String formatSpecifier</span><br><span class="line">    = <span class="string">&quot;%(\\d+\\$)?([-#+ 0,(\\&lt;]*)?(\\d+)?(\\.\\d+)?([tT])?([a-zA-Z%])&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;formatSpecifier是格式说明符的正则表达式，通过它本身的内容以及注释可知，格式说明符以’%’开始，后续依次是：</p>
<ul>
<li>argument_index-参数索引（可选），后面要加’$’。指定了要格式化的参数索引。注意，这里索引值从1开始，避免了与后面的标志’0’混淆；</li>
<li>flags-标志（可选）。从正则表达式中可知一共8种，*表明可以有多个标志；</li>
<li>width-字段宽度（可选）。最少要输出的字符数。不考虑标记的情况下，若字段宽度大于实际宽度则在前面补空格；若小于则按实际宽度输出；</li>
<li>precision-精度（可选），前面要加’.’。浮点数小数点后保留位数。若精度大于实际位数则在后面补0；若小于则四舍五入；</li>
<li>t或T（可选）。用于日期时间的格式化，已经过时，现在应该使用java.time中的方法；</li>
<li>conversion-转换符（必选）。根据正则表达式，这里可以是大小写的字母和%，实际上大部分用于格式化日期时间，必须跟在t后，除去这一部分，共13种。</li>
</ul>
<p>&emsp;&emsp;下面对转换符和标志做说明。转换符指示要格式化的数值的类型，在Formatter中的私有类Conversion可以看到所有合法的转换符，在表1中列出：</p>
<center>表1 用于printf的转换符</center>

<table>
<thead>
<tr>
<th align="left">转换符</th>
<th>类型</th>
</tr>
</thead>
<tbody><tr>
<td align="left">d</td>
<td>十进制整数</td>
</tr>
<tr>
<td align="left">o</td>
<td>八进制整数</td>
</tr>
<tr>
<td align="left">x | X</td>
<td>十六进制整数</td>
</tr>
<tr>
<td align="left">e | E</td>
<td>指数浮点数（科学计数法表示）<br />输出中的e的大小写根据转换符决定</td>
</tr>
<tr>
<td align="left">g | G</td>
<td>通用浮点数（e和f中较短的一个）</td>
</tr>
<tr>
<td align="left">f</td>
<td>十进制浮点数</td>
</tr>
<tr>
<td align="left">a | A</td>
<td>十六进制浮点数</td>
</tr>
<tr>
<td align="left">c | C</td>
<td>字符</td>
</tr>
<tr>
<td align="left">b | B</td>
<td>布尔（true和false。如果参数不是<br />boolean类型，则参数不为null打印true）</td>
</tr>
<tr>
<td align="left">s | S</td>
<td>字符串</td>
</tr>
<tr>
<td align="left">h | H</td>
<td>散列值</td>
</tr>
<tr>
<td align="left">n</td>
<td>行分隔符</td>
</tr>
<tr>
<td align="left">%</td>
<td>百分号</td>
</tr>
</tbody></table>
<p>&emsp;&emsp;标志指示输出的外观，在Formatter中的私有类Flags可以看到所有合法的标志，在表2中列出：</p>
<center>表2 用于printf的标志</center>

<table>
<thead>
<tr>
<th>标志</th>
<th>目的</th>
</tr>
</thead>
<tbody><tr>
<td>-</td>
<td>左对齐（必须给出字段宽度<br />相当于在后面补不够的空格）</td>
</tr>
<tr>
<td>#</td>
<td>使用替换形式<br />（根据具体的类型）</td>
</tr>
<tr>
<td>+</td>
<td>打印正数的’+’号</td>
</tr>
<tr>
<td>空格</td>
<td>在正数之前添加空格</td>
</tr>
<tr>
<td>0</td>
<td>数字前面补0（必须给出字段宽度）</td>
</tr>
<tr>
<td>,</td>
<td>数字添加分组分隔符</td>
</tr>
<tr>
<td>(</td>
<td>对负数，显示括在括号内的绝对值</td>
</tr>
<tr>
<td>&lt;</td>
<td>指示上一个说明的参数</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Java</category>
        <category>Core Java Volume Ⅰ</category>
      </categories>
      <tags>
        <tag>reading notes</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>第4章 对象与类</title>
    <url>/2020/09/09/%E7%AC%AC4%E7%AB%A0%20%E5%AF%B9%E8%B1%A1%E4%B8%8E%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h1><p>&emsp;&emsp;本章前面部分是通过实例来讲解的，所以选取了部分知识点，如下：</p>
<img src="/custom_source/images/%E5%AF%B9%E8%B1%A1%E4%B8%8E%E7%B1%BB.png" class="[对象与类]">

<h1 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h1><h2 id="final字段"><a href="#final字段" class="headerlink" title="final字段"></a>final字段</h2><p>&emsp;&emsp;可以将实例字段定义为final。这样的字段必须在构造对象时初始化，i.e. 必须确保在每一个构造器执行之后，这个字段的值已经设置，并且之后不能再修改这个字段。如果final变量是对象变量，只是说明这个变量不能再指向另一个不同的对象，它引用的对象本身可以被修改。</p>
<h2 id="静态字段"><a href="#静态字段" class="headerlink" title="静态字段"></a>静态字段</h2><p>&emsp;&emsp;如果将一个字段定义为static，每个类只有一个这样的字段。即使没有类对象，静态字段也存在，它属于类。</p>
<p>&emsp;&emsp;静态变量使用得比较少，静态常量比较常用。</p>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>&emsp;&emsp;静态方法是不在对象上执行的方法。静态方法不能访问非静态的字段，也不能调用非静态的方法，因为它不能再对象上执行操作。下面两种情况下可以使用静态方法：</p>
<ul>
<li>方法不需要访问对象状态，因为它需要的所有参数都通过显式参数提供；</li>
<li>方法只需要访问类的静态字段。</li>
</ul>
<h2 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h2><p>&emsp;&emsp;静态方法还有另外一种常见的用途，静态工厂方法构造对象。使用工厂方法有两个好处：</p>
<ul>
<li>构造器必须与类同名，有些时候希望不同的方法名体现构造了不同的实例；</li>
<li>构造器无法改变构造的对象的类型，工厂方法可以返回不同的类型，比如子类。</li>
</ul>
<h1 id="方法参数"><a href="#方法参数" class="headerlink" title="方法参数"></a>方法参数</h1><p>&emsp;&emsp;Java总是按值调用。Java方法对参数能做什么和不能做什么：</p>
<ul>
<li>不能修改基本数据类型的参数；</li>
<li>可以改变对象参数的状态（容易让人误解为按引用调用）；</li>
<li>不能让一个对象参数引用一个新的对象。</li>
</ul>
<h1 id="对象构造"><a href="#对象构造" class="headerlink" title="对象构造"></a>对象构造</h1><h2 id="重载-overloading"><a href="#重载-overloading" class="headerlink" title="重载(overloading)"></a>重载(overloading)</h2><p>&emsp;&emsp;多个方法有相同的名字、不同的参数。完整描述一个方法，需要指定方法名和参数类型。返回类型不是方法签名的一部分。构造器的名字和类名相同，多个构造器就是重载的例子。</p>
<h2 id="默认字段初始化"><a href="#默认字段初始化" class="headerlink" title="默认字段初始化"></a>默认字段初始化</h2><p>&emsp;&emsp;如果构造器没有显式地为字段设置初始值，那么就会被自动地赋为默认值：数值为0、布尔值为false、对象引用为null。这是字段与局部变量的一个重要区别，局部变量必须初始化。</p>
<h2 id="无参数的构造器"><a href="#无参数的构造器" class="headerlink" title="无参数的构造器"></a>无参数的构造器</h2><p>&emsp;&emsp;如果没有提供构造器，会默认提供一个无参数构造器，这个构造器将所有字段设置为默认值。如果类中提供了构造器但是没有提供无参数的构造器，那么不会提供默认的无参数构造器。如果提供了其他构造器，又希望字段赋默认值，可以提供一个空的构造器。</p>
<h2 id="显式字段初始化"><a href="#显式字段初始化" class="headerlink" title="显式字段初始化"></a>显式字段初始化</h2><p>&emsp;&emsp;可以在定义时直接为字段赋值。可以利用方法调用进行初始化。</p>
<h2 id="调用另一个构造器"><a href="#调用另一个构造器" class="headerlink" title="调用另一个构造器"></a>调用另一个构造器</h2><p>&emsp;&emsp;可以使用this(…)来调用另一个构造器。必须写在第一行，因此最多使用一次。</p>
<h2 id="初始化块"><a href="#初始化块" class="headerlink" title="初始化块"></a>初始化块</h2><p>&emsp;&emsp;可以使用{ }代码块来进行初始化。可以使用静态初始化块来初始化静态字段，方法是在初始化块前加static。在类第一次加载的时候会进行静态字段的初始化。</p>
<h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><h2 id="类的导入"><a href="#类的导入" class="headerlink" title="类的导入"></a>类的导入</h2><p>&emsp;&emsp;一个类可以使用所属包中的所有类，以及其他包中的公共类。可以采用两种方式访问另一个包中的公共类。第一种是使用完全限定名，就是包名后跟着类名；第二种是使用import语句。</p>
<h2 id="静态导入"><a href="#静态导入" class="headerlink" title="静态导入"></a>静态导入</h2><p>&emsp;&emsp;import static方式导入静态方法和静态字段。</p>
<h2 id="在包中添加类"><a href="#在包中添加类" class="headerlink" title="在包中添加类"></a>在包中添加类</h2><p>&emsp;&emsp;使用package 包名，再将源文件放到与包名匹配的子目录中。</p>
<h2 id="包访问"><a href="#包访问" class="headerlink" title="包访问"></a>包访问</h2><p>&emsp;&emsp;类、方法或变量如果没有指定public和private，可以被同一个包中的所有方法访问。</p>
<h1 id="JAR文件-amp-文档注释"><a href="#JAR文件-amp-文档注释" class="headerlink" title="JAR文件 &amp; 文档注释"></a>JAR文件 &amp; 文档注释</h1><p>&emsp;&emsp;JAR文件可以通过IDE得到，不深入了解；文档注释暂时不用，仅做一个小测试，不赘述。</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Core Java Volume Ⅰ</category>
      </categories>
      <tags>
        <tag>reading notes</tag>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
